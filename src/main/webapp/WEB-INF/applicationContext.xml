<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--
        * IoC 컨테이너의 가장 기본적인 역할은 코드를 대신해서 애플리케이션을 구성하는 오브젝트를 생성하고 관리하는 것이다.
        * 컨테이너는 빈 설정 메타정보를 통해 빈의 클래스와 이름을 제공받는다. 빈을 만들기 위한 설정 메타정보는
          파일이나 애노테이션 같은 리소스로부터 전용 리더를 읽혀서 BeanDefinition 타입의 오브젝트로 변환된다.

          XML 문서  ↘
          애노테이션 → BeanDefinition → IoC 컨테이너
          자바 코드  ↗

        * 몇 가지 필수항목을 젱하면 컨테이너에 미리 설정된 디폴트 값이 적용된다.
        * 빈 설정 메타정보 항목 중에서 가장 중요한 것은 클래스 이름이다.
    -->

    <!--
        빈 등록 방법
        1. <bean> 태그
         - 가장 처음 접할 때 바람직한 방법 중 하나 이다.
         - 자주 사용하는 기술이라면, <bean> 대신 간결한 커스텀 태그를 만드는 것이 좋다.
    -->
    <bean id="hello" class="com.tistory.tobyspring.context.Hello">
        <property name="printer">
            <bean class="com.tistory.tobyspring.context.StringPrinter" />
        </property>
    </bean>

    <!--
        빈 등록 방법
        2. 자동인식을 이용한 빈 등록
         - 스프링의 빈 스캐너는 지정된 클래스패스 아래에 있는 모든 패키지의 클래스를 대상으로
           필터를 적용하여 빈 등록을 위한 클래스들을 선별해낸다.
         - 디폴트 필터에 적용되는 애노테이션을 스프링에서는 스테레오타입 애노테이션이라고 부른다 ( @Component, .. 등)

         - XML을 이용한 빈 스캐너 등록

         +) 빈 스캐너를 내장한 애플리케이션 컨텍스트 사용
    -->
    <context:component-scan base-package="com.tistory.tobyspring" />

    <!--
        빈 등록 방법
        3. @Configuration 클래스의 @Bean 메소드
         - 컴파일러나 IDE를 통한 타입 검증이 가능하다.
         - 이해하기 쉽다.
    -->
</beans>